{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["noise","makeNoise2D","Date","now","Scene","useThree","scene","fog","THREE","intensity","position","castShadow","Terrain","mesh","useRef","useEffect","current","wireframeGeo","geometry","wireframeMat","color","wireframe","add","y","useFrame","geo","noiseWidth","noiseHeight","rotateX","vertices","map","vertex","setY","x","freq","fbm","sample","z","ref","attach","calc","cardX","cardY","trans","s","cardProps","headerText","imageUrl","style","backgroundImage","Card","useSpring","xys","config","mass","tension","friction","props","set","div","className","display","transform","interpolate","onMouseMove","clientX","clientY","window","innerWidth","innerHeight","onMouseLeave","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fec74dc4.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport React, { CSSProperties, useRef, useEffect } from 'react';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport { useSpring, animated } from 'react-spring';\nimport { makeNoise2D } from 'open-simplex-noise';\n\nimport './App.css';\n\nconst [noiseWidth, noiseHeight] = [256, 256];\nconst noise = makeNoise2D(Date.now());\n\nfunction sample(x: number, y: number): number {\n  let freq = 32;\n  let fbm = noise(x * freq, y * freq);\n  freq *= 2; x += 32;\n  fbm += noise(x * freq, y * freq) * 0.5;\n  freq *= 2; x += 42;\n  fbm += noise(x * freq, y * freq) * 0.35;\n  freq *= 2; x += 9973;\n  fbm += noise(x * freq, y * freq) * 0.25;\n  freq *= 2; x += 824;\n  fbm += noise(x * freq, y * freq) * 0.065;\n\n  return fbm*2.5;\n}\n\nfunction Scene() {\n  const { scene } = useThree();\n\n  scene.fog = new THREE.Fog(0x16161f, 10, 100);\n\n  return (\n    <>\n      <ambientLight intensity={0.25}/>\n      <spotLight position={[0, 128, 32]} intensity={0.75} castShadow />\n      <Terrain />\n    </>\n  );\n}\n\nfunction Terrain() {\n  const mesh = useRef<THREE.Mesh>();\n\n  useEffect(() => {\n    if (mesh.current) {\n      const wireframeGeo = new THREE.WireframeGeometry(mesh.current.geometry);\n      const wireframeMat = new THREE.LineBasicMaterial({color: 0x16161f});\n      const wireframe = new THREE.LineSegments(wireframeGeo, wireframeMat);\n\n      mesh.current.add(wireframe);\n      mesh.current.position.y -= 10;\n    }\n  })\n\n  useFrame(() => {\n    if (mesh.current) {\n      //mesh.current.position.z += 0.01;\n    }\n  });\n\n  const geo = new THREE.PlaneGeometry(noiseWidth, noiseHeight, noiseWidth-1, noiseHeight-1);\n  geo.rotateX(-89);\n\n  geo.vertices = geo.vertices.map(vertex => \n    vertex.setY(sample(vertex.x / 256, vertex.z / 256))\n  );\n\n  return (\n    <>\n      <mesh \n      geometry={geo}\n      ref={mesh}>\n        <meshPhongMaterial attach=\"material\" color={new THREE.Color(0x2d2d3b)} />\n      </mesh>\n    </>\n  );\n}\n\nconst calc = (x: any, y: any, cardX: number, cardY: number) => [\n  -(y - cardY) / 20, (x - cardX) / 20, 1.05\n];\n\nconst trans: any = (x: any, y: any, s: any) => `perspective(1200px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\ntype CardProps = {\n  headerText: string,\n  style: CSSProperties,\n};\n\nfunction cardProps(headerText: string, imageUrl: string): CardProps {\n  let style: CSSProperties = { backgroundImage: `url(${imageUrl})` };\n  \n  return {\n    headerText,\n    style\n  };\n}\n\nfunction Card(cardProps: CardProps) {\n  const [props, set] = useSpring(() => ({ \n    xys: [0, 0, 1], \n    config: { mass: 5, tension: 350, friction: 40 } \n  }));\n\n  function style(): React.CSSProperties {\n    return {\n      display: 'absolute',\n      transform: props.xys.interpolate(trans),\n    };\n  }\n\n  return (\n    <animated.div\n    className=\"card\"\n    style={style()}\n    onMouseMove={({ clientX: x, clientY: y }) => set ({ \n      xys: calc(\n        x, y, \n        window.innerWidth * (20 / 100), \n        window.innerHeight * (60 / 100)\n      ) \n    })}\n    onMouseLeave={() => set({ xys: [0, 0, 1] })}>\n      <div className=\"card-header\">\n        {cardProps.headerText}\n        <hr className=\"card-header-line\"></hr>\n        <div className=\"card-content\" style={cardProps.style}></div>\n      </div>\n    </animated.div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <div className=\"header\">Adam Gleave</div>\n      <Canvas>\n        <Scene />\n      </Canvas>\n      <div className=\"grid-container\">\n        <div className=\"grid\">\n          <Card {...cardProps(\"OpenMW\", \"https://i.ytimg.com/vi/izlm2CAnCpY/maxresdefault.jpg\")} />\n          <Card {...cardProps(\"OpenCK\", \"https://imgur.com/Zfh3eDn.png\")} />\n          <Card {...cardProps(\"Rustbucket\", \"https://i.imgur.com/xCYk9h7.png\")} />\n          <Card {...cardProps(\"Voxels\", \"https://imgur.com/ucOoqnc.png\")} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}