{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["noise","makeNoise2D","Date","now","Scene","useThree","scene","fog","THREE","intensity","position","castShadow","Terrain","mesh","useRef","useEffect","current","wireframeGeo","geometry","wireframeMat","color","wireframe","add","y","useFrame","geo","noiseWidth","noiseHeight","rotateX","vertices","map","vertex","setY","x","freq","fbm","sample","z","ref","attach","CardFront","props","flipId","className","onClick","toggleFlipped","style","display","headerText","CardBack","description","href","link","Card","cardProps","useState","flipped","setFlipped","scale","setScale","useSpring","opacity","transform","flipKey","spring","div","interpolate","t","onMouseEnter","onMouseLeave","o","opacityFunc","imageUrl","backgroundImage","makeProps","url","App","target","draggable","src","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.346cde8f.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport React, { CSSProperties, useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport { animated, interpolate, useSpring } from 'react-spring';\nimport { Flipper, Flipped } from 'react-flip-toolkit';\nimport { makeNoise2D } from 'open-simplex-noise';\n\nimport './App.css';\n\nconst [noiseWidth, noiseHeight] = [256, 256];\nconst noise = makeNoise2D(Date.now());\n\nfunction sample(x: number, y: number): number {\n  let freq = 32;\n  let fbm = noise(x * freq, y * freq);\n  freq *= 2; x += 32;\n  fbm += noise(x * freq, y * freq) * 0.5;\n  freq *= 2; x += 42;\n  fbm += noise(x * freq, y * freq) * 0.35;\n  freq *= 2; x += 9973;\n  fbm += noise(x * freq, y * freq) * 0.25;\n  freq *= 2; x += 824;\n  fbm += noise(x * freq, y * freq) * 0.065;\n\n  return fbm*2.5;\n}\n\nfunction Scene() {\n  const { scene } = useThree();\n\n  scene.fog = new THREE.Fog(0x16161f, 10, 100);\n\n  return (\n    <>\n      <ambientLight intensity={0.25}/>\n      <spotLight position={[0, 128, 32]} intensity={0.75} castShadow />\n      <Terrain />\n    </>\n  );\n}\n\nfunction Terrain() {\n  const mesh = useRef<THREE.Mesh>();\n\n  useEffect(() => {\n    if (mesh.current) {\n      const wireframeGeo = new THREE.WireframeGeometry(mesh.current.geometry);\n      const wireframeMat = new THREE.LineBasicMaterial({color: 0x16161f});\n      const wireframe = new THREE.LineSegments(wireframeGeo, wireframeMat);\n\n      mesh.current.add(wireframe);\n      mesh.current.position.y -= 10;\n    }\n  })\n\n  useFrame(() => {\n    if (mesh.current) {\n      //mesh.current.position.z += 0.01;\n    }\n  });\n\n  const geo = new THREE.PlaneGeometry(noiseWidth, noiseHeight, noiseWidth-1, noiseHeight-1);\n  geo.rotateX(-89);\n\n  geo.vertices = geo.vertices.map(vertex => \n    vertex.setY(sample(vertex.x / 256, vertex.z / 256))\n  );\n\n  return (\n    <>\n      <mesh \n      geometry={geo}\n      ref={mesh}>\n        <meshPhongMaterial attach=\"material\" color={new THREE.Color(0x2d2d3b)} />\n      </mesh>\n    </>\n  );\n}\n\ntype CardFrontProps = {\n  headerText: string,\n  style: CSSProperties,\n  toggleFlipped: () => void,\n};\n\nfunction makeProps(headerText: string, imageUrl: string, toggleFlipped: () => void): CardFrontProps {\n  let style: CSSProperties = { backgroundImage: `url(${imageUrl})` };\n  \n  return {\n    headerText,\n    style,\n    toggleFlipped,\n  };\n}\n\nconst CardFront = (props: CardFrontProps) => (\n  <Flipped flipId=\"card\">\n    <div className=\"card\" onClick={props.toggleFlipped}>\n      <div className=\"card-header\" style={{display: \"absolute\"}}>\n        {props.headerText}\n        <hr className=\"card-header-line\" />\n        <div className=\"card-content\" style={props.style} />\n      </div>\n    </div>\n  </Flipped>\n);\n\ntype CardBackProps = {\n  headerText: string,\n  description: string,\n  toggleFlipped: () => void,\n  link: string,\n};\n\nconst CardBack = (props: CardBackProps) => (\n  <Flipped flipId=\"card\">\n    <div className=\"card\" onClick={props.toggleFlipped}>\n      <div className=\"card-header\" style={{display: \"absolute\"}}>\n        {props.headerText}\n        <hr className=\"card-header-line\" />\n        <div className=\"card-text\">\n          {props.description}\n        </div>\n        <div className=\"card-link\">\n          <a href={props.link}>{props.link}</a>\n        </div>\n      </div>\n    </div>\n  </Flipped>\n);\n\ntype CardProps = {\n  headerText: string,\n  description: string,\n  url: string,\n  link: string,\n};\n\nconst Card = (cardProps: CardProps) => {\n  const [flipped, setFlipped] = useState(false);\n  const [scale, setScale] = useState(1);\n\n  const toggleFlipped = () => setFlipped(flipped => !flipped);\n\n  const { transform, opacity } = useSpring({\n    opacity: flipped ? 1 : 0,\n    transform: `perspective(1200px) rotateX(${flipped ? 180 : 0}deg) scale(${scale})`,\n  });\n\n  function opacityFunc(o: any): number {\n    if (typeof o === \"number\") {\n      return 1 - o;\n    }\n    return 1;\n  }\n\n  return (\n      <Flipper flipKey={flipped} spring=\"gentle\">\n      {flipped ? (\n        <animated.div style={{ opacity, transform: transform.interpolate(t => `${t} rotateX(180deg)`) }}>\n          <CardBack headerText={cardProps.headerText} toggleFlipped={toggleFlipped} description={cardProps.description} link={cardProps.link}/>\n        </animated.div>\n      ) : (\n        <animated.div onMouseEnter={() => setScale(1.096)} onMouseLeave={() => setScale(1)} style={{ opacity: opacity.interpolate(o => opacityFunc(o)), transform }}>\n          <CardFront {...makeProps(cardProps.headerText, cardProps.url, toggleFlipped)} />\n        </animated.div>\n      )}\n    </Flipper>\n  );\n}\n\nfunction App() {\n  const openMwText = `OpenMW are working on bringing an open-source engine to The Elder Scrolls 3: Morrowind.\n                      There have been multiple releases, and are readily available to download. \n                      As part of my contributions to this project, I have implemented various changes and\n                      interface improvements to the Construction Set â€” the level editor and modding toolkit.`;\n  \n  const openCkText = `I am the current director of the OpenCK project. Closely affiliated with the modding\n                      team \\\"Beyond Skyrim\\\", this project aims to create a more stable and user-friendly\n                      level/mod editor for The Elder Scrolls 5: Skyrim. Progress is currently heavily ongoing.`;\n  \n  const rustbucketText = `Rustbucket is a tiny, hobby-project kernel written in Rust as an educational dive into\n                          the language and operating system concepts. It is fully compatible with x86-64 hardware,\n                          with the only non-Rust code being the bootstrapping assembler. Current features include\n                          exception, fault, and interrupt handling, with the addition of a keyboard driver.\n                          Future features may include memory and page management and a console system.`;\n  \n  const voxelsText = `Procedural generation and computer graphics have been long-standing interests of mine.\n                      My most notable project in this area is a university submission consisting of an endless\n                      procedural terrain generator. This runs on multiple threads for fast generation, and \n                      uses voxels and signed distance feels to represent the terrain volume. Surface extraction\n                      was achieved through an implementation of the \\\"Dual Contouring\\\" algorithm.`;\n\n  return (\n    <div className=\"main\">\n      <div className=\"header\">\n        Adam Gleave\n      </div>\n      <Canvas>\n        <Scene />\n      </Canvas>\n      <div className=\"grid-container\">\n        <div className=\"grid\">\n          <Card headerText=\"OpenMW\" url=\"https://i.ytimg.com/vi/izlm2CAnCpY/maxresdefault.jpg\" description={openMwText} link=\"https://gitlab.com/OpenMW/openmw\" />\n          <Card headerText=\"OpenCK\" url=\"https://imgur.com/Zfh3eDn.png\" description={openCkText} link=\"https://github.com/Open-CK/OpenCK\" />\n          <Card headerText=\"Rustbucket\" url=\"https://i.imgur.com/xCYk9h7.png\" description={rustbucketText} link=\"https://github.com/Adam-Gleave/rustbucket\" />\n          <Card headerText=\"Voxels\" url=\"https://imgur.com/ucOoqnc.png\" description={voxelsText} link=\"https://github.com/Adam-Gleave/SOFT356\" />\n        </div>\n      </div>\n      <div>\n        <div className=\"footer-container\">\n          <div className=\"footer\">\n            <a href=\"https://github.com/Adam-Gleave/\" target=\"_blank\" draggable={false}>\n              <img src={process.env.PUBLIC_URL + \"/images/GitHub-Mark-Light-32px.png\"} draggable={false} />\n            </a>\n            <a href=\"mailto:adamgleave97@gmail.com\" draggable={false}>\n              <img src={process.env.PUBLIC_URL + \"/images/mail-32.png\"} draggable={false} />\n            </a>\n            <a href=\"https://www.linkedin.com/in/adam-gleave/\" target=\"_blank\" draggable={false}>\n              <img src={process.env.PUBLIC_URL + \"/images/linkedin-5-32.png\"} draggable={false} />\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}